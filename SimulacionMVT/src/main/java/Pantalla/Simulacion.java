package Pantalla;

import java.awt.Component;
import java.awt.Container;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author alber
 */
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class Simulacion extends javax.swing.JFrame {
       
    private int contador = 0; // Declaramos e inicializamos el contador
    DefaultTableModel dtm1 = new DefaultTableModel(); // Modelo de tabla 1
    DefaultTableModel dtm2 = new DefaultTableModel();
    private Map<String, Component> componentesMapa = new HashMap<>(); // Mapa para almacenar componentes por nombre
    public void Tabla1(){
        //initComponents();
        String[] titulo1 = new String[]{"No", "Localidad", "Tamaño", "Estado"};
        dtm1.setColumnIdentifiers(titulo1);
        
        // Datos precargados para la tabla de Áreas Libres
        Object[] datosPrecargados = {1, "10", "54", "Disponible"};
        dtm1.addRow(datosPrecargados);
        
        tablaAreasLibres.setModel(dtm1);
    }
    public void Tabla2(){
        //initComponents();
        String[] titulo2 = new String[]{"No", "Localidad", "Tamaño", "Estado", "Proceso"};
        dtm2.setColumnIdentifiers(titulo2);
        tablaParticiones.setModel(dtm2);
    }
    
    // Actulizamos la fila
    public void actualizarFila(DefaultTableModel dtm, int filaIndex, Object[] nuevaFila) {
        for (int i = 0; i < nuevaFila.length; i++) {
            dtm.setValueAt(nuevaFila[i], filaIndex, i);
        }
    }

    public void agregar(DefaultTableModel dtm, Object[] fila) {
        dtm.addRow(fila);
    }
    
    public void limpiarTabla(DefaultTableModel modelo) {
        int rowCount = modelo.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
    
    // Método para ocultar un componente por su nombre
    /*
     private void ocultarComponentePorNombre(String nombre) {
        Component componente = componentesMapa.get(nombre);
        if (componente != null) {
            componente.setVisible(false); // Ocultar el componente
            jPanel1.revalidate(); // Actualizar el panel
            jPanel1.repaint(); // Repintar el panel
        }
    }
     */
    /*
     private void mostrarComponentePorNombre(String nombre) {
    Component componente = componentesMapa.get(nombre);
        if (componente != null) {
            componente.setVisible(true); // Hacer visible el componente
            jPanel1.revalidate(); // Actualizar el panel
            jPanel1.repaint(); // Repintar el panel
        }
    }
    */


    
    
    
    /**
     * Creates new form Simulacion
     */
    public Simulacion() {
        initComponents();
        Tabla1();
        Tabla2();
        
        Animacion1 a1 = new Animacion1();
        a1.setSize(300, 420);
        a1.setLocation(0, 0);
        //componentesMapa.put("ProcesoA", ProcesoA);
        mensaje.setText("Sin Acciones");
      
        
        memoria.removeAll();
        memoria.add(a1, BorderLayout.CENTER);
        memoria.revalidate();
        memoria.repaint();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaAreasLibres = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaParticiones = new javax.swing.JTable();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        memoria = new javax.swing.JPanel();
        mensaje = new javax.swing.JLabel();
        TextoMemoria = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("SIMULACIÓN DE ASIGNACIÓN DE MEMORIA CON MVT");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(240, 30, 540, 22);

        jButton1.setBackground(new java.awt.Color(255, 153, 102));
        jButton1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jButton1.setText("Paso 0");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(490, 610, 150, 40);

        jLabel2.setText("Tabla Áreas Libres (TAL[ ])");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(90, 200, 160, 16);

        jLabel3.setText("Tabla Particiones (TP[ ])");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(90, 410, 140, 16);

        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\alber\\Downloads\\tabla2.png")); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(280, 40, 420, 150);

        tablaAreasLibres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablaAreasLibres);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(90, 230, 480, 110);

        tablaParticiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaParticiones);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(90, 450, 480, 130);

        jLayeredPane1.setBackground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );

        jPanel2.add(jLayeredPane1);
        jLayeredPane1.setBounds(600, 300, 100, 120);

        javax.swing.GroupLayout memoriaLayout = new javax.swing.GroupLayout(memoria);
        memoria.setLayout(memoriaLayout);
        memoriaLayout.setHorizontalGroup(
            memoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        memoriaLayout.setVerticalGroup(
            memoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        jPanel2.add(memoria);
        memoria.setBounds(710, 210, 300, 420);

        mensaje.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        mensaje.setText("jLabel5");
        jPanel2.add(mensaje);
        mensaje.setBounds(250, 610, 230, 22);

        TextoMemoria.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TextoMemoria.setText("Memoria");
        jPanel2.add(TextoMemoria);
        TextoMemoria.setBounds(820, 170, 240, 22);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1086, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Incrementar el contador
        contador++;
        
        // Rellenamos la tabla
        // Agregar una fila a la tablaAreasLibres
        //Object[] fila1 = {contador, "Localidad" + contador, "Tamaño" + contador, "Estado" + contador};
        //agregar(dtm1, fila1);
        
        // Agregar una fila a la tablaParticiones
        //Object[] fila2 = {contador, "Localidad" + contador, "Tamaño" + contador, "Estado" + contador, "Proceso" + contador};
        //agregar(dtm2, fila2);
        
if (contador <= 11) {
        // Actualizar el texto del JLabel
        jButton1.setText("Paso " + contador);
        
        if (contador == 1) {
            // Actualizar la primera fila de tablaAreasLibres
            Object[] nuevaFila1 = {1, "18K", "46K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);

            // Añadir una nueva fila a la tabla de particiones
            Object[] nuevaFila2 = {contador, "10k", "8k", "Ocupado", "A"};
            agregar(dtm2, nuevaFila2);
            
            //eliminarComponentePorNombre(ProcesoA);
            //ocultarComponentePorNombre("JPanel3");
            //ocultarComponentePorNombre("ProcesoA");
            Animacion2 a2 = new Animacion2();
            a2.setSize(300, 420);
            a2.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a2, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            
            mensaje.setText("Se insertó: A");
            

        } else if (contador == 2) {
            // Actualizar la misma fila de tablaAreasLibres con otros datos
            Object[] nuevaFila1 = {1, "32K", "32K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);
            
            
            // Tabla de particiones
            Object[] nuevaFila2_1 = {1, "10K", "8K", "Ocupado", "A"};
            actualizarFila(dtm2, 0, nuevaFila2_1);
            Object[] nuevaFila2_2 = {2, "18K", "14K", "Ocupado", "B"};
            agregar(dtm2, nuevaFila2_2);
            
            Animacion3 a3 = new Animacion3();
            a3.setSize(300, 420);
            a3.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a3, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            
            mensaje.setText("Se insertó: B");
        
        } else if (contador == 3) {
            Object[] nuevaFila1 = {1, "50K", "14K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);
            
            // tabla de particiones
            Object[] nuevaFila2_3 = {3, "32K", "18K", "Ocupado", "C"};
            agregar(dtm2, nuevaFila2_3);
            
            Animacion4 a4 = new Animacion4();
            a4.setSize(300, 420);
            a4.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a4, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            
            mensaje.setText("Se insertó: C");

        } else if (contador == 4) {
            Object[] nuevaFila1 = {1, "56K", "8K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);
            
            // tabla de particiones
            Object[] nuevaFila2_4 = {4, "50K", "6K", "Ocupado", "D"};
            agregar(dtm2, nuevaFila2_4);
            
            // animacion
            Animacion5 a5 = new Animacion5();
            a5.setSize(300, 420);
            a5.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a5, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            mensaje.setText("Se insertó: D");

        } else if (contador == 5) {
            // No se hace nada en el caso 5
            mensaje.setText("No se pudo insertar: E");
        } else if (contador == 6) {
            TextoMemoria.setText("Fragmentación");
            Object[] nuevaFila1 = {1, "32K", "18K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);

            // Añadir una nueva fila
            Object[] nuevaFila = {2, "56K", "8K", "Disponible"};
            agregar(dtm1, nuevaFila);
            
            
            // tabla de paarticiones
            // Limpiar la tabla de particiones antes de agregar nuevas filas
            limpiarTabla(dtm2);

            // Añadir las nuevas filas a la tabla de particiones
            Object[] nuevaFila2_1 = {1, "10k", "8k", "Ocupado", "A"};
            Object[] nuevaFila2_2 = {2, "18k", "14k", "Ocupado", "B"};
            Object[] nuevaFila2_3 = {3, "50k", "6k", "Ocupado", "D"};

            agregar(dtm2, nuevaFila2_1);
            agregar(dtm2, nuevaFila2_2);
            agregar(dtm2, nuevaFila2_3);
            
            // animacion
            Simulacion6 a6 = new Simulacion6();
            a6.setSize(300, 420);
            a6.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a6, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            mensaje.setText("Se retiró: C");


        } else if (contador == 7) {
            TextoMemoria.setText("Fragmentación");
            Object[] nuevaFila1 = {1, "46K", "4K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);
            
            // tabla de particiones
            limpiarTabla(dtm2);
    
            // Agregar nuevas filas a la tabla de particiones
            Object[] fila1 = {1, "10k", "8k", "Ocupado", "A"};
            Object[] fila2 = {2, "18k", "14k", "Ocupado", "B"};
            Object[] fila3 = {3, "32k", "14k", "Ocupado", "E"};
            Object[] fila4 = {4, "50k", "6k", "Ocupado", "D"};
    
            agregar(dtm2, fila1);
            agregar(dtm2, fila2);
            agregar(dtm2, fila3);
            agregar(dtm2, fila4);
            
            // animacion
            Animacion7 a7 = new Animacion7();
            a7.setSize(300, 420);
            a7.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a7, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            mensaje.setText("Se insertó: E");

        } else if (contador == 8) {
            TextoMemoria.setText("Fragmentación");
            // Actualizar la primera fila
            Object[] fila1 = {1, "10K", "8K", "Disponible"};
            actualizarFila(dtm1, 0, fila1);

            // Si no hay suficientes filas, las agregamos antes de actualizar
            if (dtm1.getRowCount() < 2) {
                agregar(dtm1, new Object[]{2, "", "", ""});
            }
            if (dtm1.getRowCount() < 3) {
                agregar(dtm1, new Object[]{3, "", "", ""});
            }

            // Actualizar la segunda fila
            Object[] fila2 = {2, "46K", "4K", "Disponible"};
            actualizarFila(dtm1, 1, fila2);

            // Actualizar la tercera fila
            Object[] fila3 = {3, "50K", "8K", "Disponible"};
            actualizarFila(dtm1, 2, fila3);
            
            
            
            
            
            // tabla de particiones
             // Limpiar la tabla de particiones
            limpiarTabla(dtm2);
    
            // Agregar nuevas filas a la tabla de particiones
 

            // Agregar nuevas filas a la tabla de particiones
            Object[] filaParticion1 = {1, "18k", "14k", "Ocupado", "B"};
            Object[] filaParticion2 = {2, "32k", "14k", "Ocupado", "E"};
            Object[] filaParticion3 = {3, "50k", "6k", "Ocupado", "D"};

            agregar(dtm2, filaParticion1);
            agregar(dtm2, filaParticion2);
            agregar(dtm2, filaParticion3);
            
            // animacion
            Animacion8 a8 = new Animacion8();
            a8.setSize(300, 420);
            a8.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a8, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            mensaje.setText("Se retiró: A");
        }else if (contador == 9){
            TextoMemoria.setText("Fragmentación");
            Object[] nuevaFila1 = {1, "10K", "22K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);

            Object[] nuevaFila2 = {2, "46K", "4K", "Disponible"};
            actualizarFila(dtm1, 1, nuevaFila2);

            Object[] nuevaFila3 = {3, "56K", "8K", "Disponible"};
            actualizarFila(dtm1, 2, nuevaFila3);
            
            
            // Tabla de particiones
           limpiarTabla(dtm2);

            // Agregar nuevas filas a la tabla de particiones
            Object[] filaParticion1 = {1, "32k", "14k", "Ocupado", "E"};
            Object[] filaParticion2 = {2, "50k", "6k", "Ocupado", "D"};

            agregar(dtm2, filaParticion1);
            agregar(dtm2, filaParticion2);
            
            // animacion
            Animacion9 a9 = new Animacion9();
            a9.setSize(300, 420);
            a9.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a9, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            mensaje.setText("Se retiró: B");
            
        }else if (contador == 10){
            TextoMemoria.setText("Fragmentación");
            Object[] nuevaFila1 = {1, "10K", "22K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);

            Object[] nuevaFila2 = {2, "46K", "18K", "Disponible"};
            actualizarFila(dtm1, 1, nuevaFila2);

            // Eliminar la tercera fila
            if (dtm1.getRowCount() >= 3) {
            dtm1.removeRow(2);
            }
            
            
            // tabla de particiones
            // Limpiar la tabla de particiones
            limpiarTabla(dtm2);

            // Agregar nueva fila a la tabla de particiones
            Object[] filaParticion1 = {1, "32k", "14k", "Ocupado", "E"};

            agregar(dtm2, filaParticion1);
            
            // animacion
            Animacion10 a10 = new Animacion10();
            a10.setSize(300, 420);
            a10.setLocation(0, 0);
            
            memoria.removeAll();
            memoria.add(a10, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            mensaje.setText("Se retiró: D");
            
            
        }else if(contador == 11){
            TextoMemoria.setText("Memoria");
            Object[] nuevaFila1 = {1, "10K", "54K", "Disponible"};
            actualizarFila(dtm1, 0, nuevaFila1);

            // Eliminar las filas adicionales si existen
            int rowCount = dtm1.getRowCount();
            for (int i = rowCount - 1; i >= 1; i--) {
                dtm1.removeRow(i);
            }
            
            // tabla de particiones
            limpiarTabla(dtm2);
            
            Animacion1 a1 = new Animacion1();
            a1.setSize(300, 420);
            a1.setLocation(0, 0);
            //componentesMapa.put("ProcesoA", ProcesoA);
            mensaje.setText("Se retiró: E");
      
        
            memoria.removeAll();
            memoria.add(a1, BorderLayout.CENTER);
            memoria.revalidate();
            memoria.repaint();
            
        }
        
        
        
            
        }else{
            jButton1.setText("Finalizada"); // Cambiamos la leyenda del boton
            JOptionPane.showMessageDialog(this, "La simulación ha terminado", "Simulacion terminada", JOptionPane.QUESTION_MESSAGE);
            contador = 0;
            
            // Mostramos un cuadro de dilogo
            int opcion = JOptionPane.showConfirmDialog(this, "¿Desea salir?", "Simulación terminada", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            jButton1.setText("Paso " + contador);
            mensaje.setText("Sin Acciones");
            if(opcion == JOptionPane.YES_OPTION){
                // Salimos del programa
                System.exit(0);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TextoMemoria;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel memoria;
    private javax.swing.JLabel mensaje;
    private javax.swing.JTable tablaAreasLibres;
    private javax.swing.JTable tablaParticiones;
    // End of variables declaration//GEN-END:variables
}
